// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Simulator {
  id    Int    @id @default(autoincrement())
  name  String @unique
  image String
  maps  Map[]
}

model Record {
  id      Int    @id @default(autoincrement())
  track   Track  @relation(fields: [trackId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
  time    Int
  trackId Int
  userId  String

  @@unique([userId, trackId])
}

model Map {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  image       String
  tracks      Track[]
  Simulator   Simulator? @relation(fields: [simulatorId], references: [id])
  simulatorId Int?
}

model Track {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  image  String
  Map    Map?     @relation(fields: [mapsId], references: [id])
  mapsId Int?
  Record Record[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  Record        Record[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
